---
title: "Project title"
subtitle: "INFO 526 - Summer 2024 - Final Project"
author: "Author names"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
  
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false

# Load packages here
pacman::p_load(dplyr,
               tidyverse, 
               glue, 
               scales, 
               here, 
               ggthemes, 
               janitor, 
               ggplot2, 
               readr,
               ggrepel)

```

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 6, 
  fig.asp = 0.618 
  )
```

```{r}
#| label: load-data
#| include: false


# load data here
coffee_survey <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-05-14/coffee_survey.csv')

# glimpse at data (4,042 rows)
coffee_survey

```


# Using Quarto for presentations

## Quarto

-   The presentation is created using the Quarto CLI

-   `##` sets the start of a new slide

## Layouts

You can use plain text

::: columns
::: {.column width="40%"}
-   or bullet points[^1]
:::

::: {.column width="60%"}
or in two columns
:::
:::

[^1]: And add footnotes

-   like

-   this

## Code


```{r, echo=FALSE}
#| label: code for plot 1
#| fig-height: 8
#| fig-width: 8

coffee_survey

# selecting relevant variables for both plots (3,949 rows)
coffee_survey_clean <- coffee_survey %>% 
  select(cups, employment_status, number_children, wfh, age) %>% 
  filter(!is.na(cups))

coffee_survey_clean  


# selecting relevant variables and filtering out na for plot 1 (3,419 rows)
coffee_survey_clean1 <- coffee_survey_clean %>% 
  select(cups, employment_status) %>% # don't need number_children and age
  filter(!is.na(employment_status))

coffee_survey_clean1 


# selecting relevant variables and filtering out na for plot 1 with wfh (3,366 rows)
coffee_survey_clean1_wfh <- coffee_survey_clean %>% 
  select(cups, employment_status, wfh) %>% # don't need number_children and age
  filter(!is.na(employment_status)) %>%
  filter(!is.na(wfh))  

coffee_survey_clean1_wfh 



# calculating counts for combinations of cups + employment_status and cups + employment_status + wfh
employment_status_count <- coffee_survey_clean1 %>% 
  count(employment_status) %>% # counting total count for each employment_status
  rename(total_es = n)

employment_status_cups_count <- coffee_survey_clean1 %>% 
  count(cups, employment_status) %>% # counting total count for each cups + employment_status
  rename(total_es_c = n)



employment_status_count
employment_status_cups_count


# combining counts with original plot and cleaning data set for plotting 
coffee_survey_plot1 <- left_join(employment_status_count, employment_status_cups_count) 

coffee_survey_plot1

#calculating percentages
coffee_survey_plot1 <- coffee_survey_plot1 %>% 
  mutate(percent = total_es_c/total_es)

coffee_survey_plot1 <- coffee_survey_plot1 %>% 
  mutate(percent = percent(coffee_survey_plot1$percent, accuracy = 0.1))
  
#mutate to manually position labels on pie chart
coffee_survey_plot1 <- coffee_survey_plot1 %>%  
  group_by(employment_status) %>% 
  mutate(csum = rev(cumsum(rev(total_es_c))),
         pos = total_es_c/2 + lead(csum, 1),
         pos = if_else(is.na(pos), total_es_c/2, pos))

coffee_survey_plot1 %>% 
  filter(
    employment_status %in% c("Employed full-time")
  ) %>% 
  ggplot(aes(x = "", y = total_es_c, fill = cups)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  scale_x_discrete(NULL, expand = c(0, 0)) +
  scale_y_continuous(NULL, expand = c(0, 0)) +
  scale_fill_manual(values = 
                      c("#FBE183FF", "#FE9B00FF",
                        "#D8443CFF", "#9B3441FF", 
                        "#E87B89FF", "#E6A2A6FF"), name = "Cups of Coffee per Day") +
  geom_label_repel( 
    mapping = aes(y = pos, label = paste(percent)),
    size = 3,
    nudge_x = 0.9,
    show.legend = FALSE) +
  theme_void() +
  theme(
    axis.text = element_blank(),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
    plot.title.position = "plot",
    legend.text = element_text(size = 8), #text of legend
    legend.key.size = unit(0.25, "cm"),
    plot.caption = element_text(hjust = 0, size = 6, face = "bold"),
    plot.tag = element_text(size = 6, hjust = 0),
    plot.tag.position = "bottom"
  ) 




```

```{r, echo=FALSE}
#| label: code for plot 
#| fig-height: 8
#| fig-width: 8


# selecting relevant variables and filtering out na for plot 2 (3,406 rows)
coffee_survey_clean2 <- coffee_survey_clean %>% 
  select(cups, number_children, age) %>% 
  filter(!is.na(number_children)) %>% 
  filter(!is.na(age))

coffee_survey_clean2 

coffee_survey_clean2 %>% ggplot() +
  geom_jitter(aes(x = number_children, y = cups)) +
  facet_wrap(~ age)
```


## Plots


```{r}



coffee_survey_clean %>% 
  filter(!is.na(employment_status)) %>%
  filter(!is.na(wfh)) %>% 
  ggplot() +
  geom_jitter(aes(x = employment_status, y = cups)) 

coffee_survey_clean %>% 
  filter(!is.na(employment_status)) %>%
  filter(!is.na(wfh)) %>% 
  ggplot() +
  geom_count(aes(x = employment_status, y = cups)) +
  scale_x_discrete(labels = label_wrap(10)) 



#geom_bar(stat="identity") +
  #scale_x_discrete(name = "name", labels = df$name)

#barplot(
  
#  count(tile)

  
#mutate(species = ifelse(species == "Adelie", "Adelie", "Other")) |>
 # ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  #geom_point()
```


## Plot and text

::: columns
::: {.column width="50%"}
-   Some text

-   goes here
:::

::: {.column width="50%"}

```{r, warning=FALSE, fig.width=5.5}

```

:::
:::

# A new section...

## Tables

If you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,


```{r}

```


## Images

![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png){fig-align="center" width="500"}

## Math Expressions {.smaller}

You can write LaTeX math expressions inside a pair of dollar signs, e.g.Â \$\\alpha+\\beta\$ renders $\alpha + \beta$. You can use the display style with double dollar signs:

```         
$$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$
```

$$
\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i
$$

Limitations:

1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;

2.  There should not be spaces after the opening `$` or before the closing `$`.

# Wrap up

## Feeling adventurous?

-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.

-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.

